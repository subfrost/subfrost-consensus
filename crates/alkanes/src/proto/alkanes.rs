// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 28.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `alkanes.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:alkanes.uint128)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Uint128 {
    // message fields
    // @@protoc_insertion_point(field:alkanes.uint128.lo)
    pub lo: u64,
    // @@protoc_insertion_point(field:alkanes.uint128.hi)
    pub hi: u64,
    // special fields
    // @@protoc_insertion_point(special_field:alkanes.uint128.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Uint128 {
    fn default() -> &'a Uint128 {
        <Uint128 as ::protobuf::Message>::default_instance()
    }
}

impl Uint128 {
    pub fn new() -> Uint128 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lo",
            |m: &Uint128| { &m.lo },
            |m: &mut Uint128| { &mut m.lo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hi",
            |m: &Uint128| { &m.hi },
            |m: &mut Uint128| { &mut m.hi },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Uint128>(
            "uint128",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Uint128 {
    const NAME: &'static str = "uint128";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.lo = is.read_uint64()?;
                },
                16 => {
                    self.hi = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.lo != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.lo);
        }
        if self.hi != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.hi);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.lo != 0 {
            os.write_uint64(1, self.lo)?;
        }
        if self.hi != 0 {
            os.write_uint64(2, self.hi)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Uint128 {
        Uint128::new()
    }

    fn clear(&mut self) {
        self.lo = 0;
        self.hi = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Uint128 {
        static instance: Uint128 = Uint128 {
            lo: 0,
            hi: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Uint128 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("uint128").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Uint128 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Uint128 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:alkanes.AlkaneId)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AlkaneId {
    // message fields
    // @@protoc_insertion_point(field:alkanes.AlkaneId.block)
    pub block: ::protobuf::MessageField<Uint128>,
    // @@protoc_insertion_point(field:alkanes.AlkaneId.tx)
    pub tx: ::protobuf::MessageField<Uint128>,
    // special fields
    // @@protoc_insertion_point(special_field:alkanes.AlkaneId.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AlkaneId {
    fn default() -> &'a AlkaneId {
        <AlkaneId as ::protobuf::Message>::default_instance()
    }
}

impl AlkaneId {
    pub fn new() -> AlkaneId {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Uint128>(
            "block",
            |m: &AlkaneId| { &m.block },
            |m: &mut AlkaneId| { &mut m.block },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Uint128>(
            "tx",
            |m: &AlkaneId| { &m.tx },
            |m: &mut AlkaneId| { &mut m.tx },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AlkaneId>(
            "AlkaneId",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AlkaneId {
    const NAME: &'static str = "AlkaneId";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.block)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tx)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.tx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.block.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.tx.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AlkaneId {
        AlkaneId::new()
    }

    fn clear(&mut self) {
        self.block.clear();
        self.tx.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AlkaneId {
        static instance: AlkaneId = AlkaneId {
            block: ::protobuf::MessageField::none(),
            tx: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AlkaneId {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AlkaneId").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AlkaneId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AlkaneId {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:alkanes.AlkaneTransfer)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AlkaneTransfer {
    // message fields
    // @@protoc_insertion_point(field:alkanes.AlkaneTransfer.id)
    pub id: ::protobuf::MessageField<AlkaneId>,
    // @@protoc_insertion_point(field:alkanes.AlkaneTransfer.value)
    pub value: ::protobuf::MessageField<Uint128>,
    // special fields
    // @@protoc_insertion_point(special_field:alkanes.AlkaneTransfer.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AlkaneTransfer {
    fn default() -> &'a AlkaneTransfer {
        <AlkaneTransfer as ::protobuf::Message>::default_instance()
    }
}

impl AlkaneTransfer {
    pub fn new() -> AlkaneTransfer {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AlkaneId>(
            "id",
            |m: &AlkaneTransfer| { &m.id },
            |m: &mut AlkaneTransfer| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Uint128>(
            "value",
            |m: &AlkaneTransfer| { &m.value },
            |m: &mut AlkaneTransfer| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AlkaneTransfer>(
            "AlkaneTransfer",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AlkaneTransfer {
    const NAME: &'static str = "AlkaneTransfer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.id)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AlkaneTransfer {
        AlkaneTransfer::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AlkaneTransfer {
        static instance: AlkaneTransfer = AlkaneTransfer {
            id: ::protobuf::MessageField::none(),
            value: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AlkaneTransfer {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AlkaneTransfer").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AlkaneTransfer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AlkaneTransfer {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:alkanes.MessageContextParcel)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MessageContextParcel {
    // message fields
    // @@protoc_insertion_point(field:alkanes.MessageContextParcel.alkanes)
    pub alkanes: ::std::vec::Vec<AlkaneTransfer>,
    // @@protoc_insertion_point(field:alkanes.MessageContextParcel.transaction)
    pub transaction: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:alkanes.MessageContextParcel.height)
    pub height: u64,
    // @@protoc_insertion_point(field:alkanes.MessageContextParcel.txindex)
    pub txindex: u32,
    // @@protoc_insertion_point(field:alkanes.MessageContextParcel.calldata)
    pub calldata: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:alkanes.MessageContextParcel.vout)
    pub vout: u32,
    // @@protoc_insertion_point(field:alkanes.MessageContextParcel.pointer)
    pub pointer: u32,
    // @@protoc_insertion_point(field:alkanes.MessageContextParcel.refund_pointer)
    pub refund_pointer: u32,
    // special fields
    // @@protoc_insertion_point(special_field:alkanes.MessageContextParcel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageContextParcel {
    fn default() -> &'a MessageContextParcel {
        <MessageContextParcel as ::protobuf::Message>::default_instance()
    }
}

impl MessageContextParcel {
    pub fn new() -> MessageContextParcel {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "alkanes",
            |m: &MessageContextParcel| { &m.alkanes },
            |m: &mut MessageContextParcel| { &mut m.alkanes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "transaction",
            |m: &MessageContextParcel| { &m.transaction },
            |m: &mut MessageContextParcel| { &mut m.transaction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &MessageContextParcel| { &m.height },
            |m: &mut MessageContextParcel| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "txindex",
            |m: &MessageContextParcel| { &m.txindex },
            |m: &mut MessageContextParcel| { &mut m.txindex },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "calldata",
            |m: &MessageContextParcel| { &m.calldata },
            |m: &mut MessageContextParcel| { &mut m.calldata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vout",
            |m: &MessageContextParcel| { &m.vout },
            |m: &mut MessageContextParcel| { &mut m.vout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pointer",
            |m: &MessageContextParcel| { &m.pointer },
            |m: &mut MessageContextParcel| { &mut m.pointer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "refund_pointer",
            |m: &MessageContextParcel| { &m.refund_pointer },
            |m: &mut MessageContextParcel| { &mut m.refund_pointer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageContextParcel>(
            "MessageContextParcel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageContextParcel {
    const NAME: &'static str = "MessageContextParcel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.alkanes.push(is.read_message()?);
                },
                18 => {
                    self.transaction = is.read_bytes()?;
                },
                32 => {
                    self.height = is.read_uint64()?;
                },
                48 => {
                    self.txindex = is.read_uint32()?;
                },
                42 => {
                    self.calldata = is.read_bytes()?;
                },
                56 => {
                    self.vout = is.read_uint32()?;
                },
                64 => {
                    self.pointer = is.read_uint32()?;
                },
                72 => {
                    self.refund_pointer = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.alkanes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.transaction.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transaction);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.height);
        }
        if self.txindex != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.txindex);
        }
        if !self.calldata.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.calldata);
        }
        if self.vout != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.vout);
        }
        if self.pointer != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.pointer);
        }
        if self.refund_pointer != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.refund_pointer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.alkanes {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if !self.transaction.is_empty() {
            os.write_bytes(2, &self.transaction)?;
        }
        if self.height != 0 {
            os.write_uint64(4, self.height)?;
        }
        if self.txindex != 0 {
            os.write_uint32(6, self.txindex)?;
        }
        if !self.calldata.is_empty() {
            os.write_bytes(5, &self.calldata)?;
        }
        if self.vout != 0 {
            os.write_uint32(7, self.vout)?;
        }
        if self.pointer != 0 {
            os.write_uint32(8, self.pointer)?;
        }
        if self.refund_pointer != 0 {
            os.write_uint32(9, self.refund_pointer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageContextParcel {
        MessageContextParcel::new()
    }

    fn clear(&mut self) {
        self.alkanes.clear();
        self.transaction.clear();
        self.height = 0;
        self.txindex = 0;
        self.calldata.clear();
        self.vout = 0;
        self.pointer = 0;
        self.refund_pointer = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageContextParcel {
        static instance: MessageContextParcel = MessageContextParcel {
            alkanes: ::std::vec::Vec::new(),
            transaction: ::std::vec::Vec::new(),
            height: 0,
            txindex: 0,
            calldata: ::std::vec::Vec::new(),
            vout: 0,
            pointer: 0,
            refund_pointer: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageContextParcel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageContextParcel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageContextParcel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageContextParcel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:alkanes.KeyValuePair)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyValuePair {
    // message fields
    // @@protoc_insertion_point(field:alkanes.KeyValuePair.key)
    pub key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:alkanes.KeyValuePair.value)
    pub value: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:alkanes.KeyValuePair.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyValuePair {
    fn default() -> &'a KeyValuePair {
        <KeyValuePair as ::protobuf::Message>::default_instance()
    }
}

impl KeyValuePair {
    pub fn new() -> KeyValuePair {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &KeyValuePair| { &m.key },
            |m: &mut KeyValuePair| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &KeyValuePair| { &m.value },
            |m: &mut KeyValuePair| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyValuePair>(
            "KeyValuePair",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeyValuePair {
    const NAME: &'static str = "KeyValuePair";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_bytes()?;
                },
                18 => {
                    self.value = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyValuePair {
        KeyValuePair::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyValuePair {
        static instance: KeyValuePair = KeyValuePair {
            key: ::std::vec::Vec::new(),
            value: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeyValuePair {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeyValuePair").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeyValuePair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyValuePair {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:alkanes.ExtendedCallResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExtendedCallResponse {
    // message fields
    // @@protoc_insertion_point(field:alkanes.ExtendedCallResponse.alkanes)
    pub alkanes: ::std::vec::Vec<AlkaneTransfer>,
    // @@protoc_insertion_point(field:alkanes.ExtendedCallResponse.storage)
    pub storage: ::std::vec::Vec<KeyValuePair>,
    // @@protoc_insertion_point(field:alkanes.ExtendedCallResponse.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:alkanes.ExtendedCallResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExtendedCallResponse {
    fn default() -> &'a ExtendedCallResponse {
        <ExtendedCallResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExtendedCallResponse {
    pub fn new() -> ExtendedCallResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "alkanes",
            |m: &ExtendedCallResponse| { &m.alkanes },
            |m: &mut ExtendedCallResponse| { &mut m.alkanes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "storage",
            |m: &ExtendedCallResponse| { &m.storage },
            |m: &mut ExtendedCallResponse| { &mut m.storage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &ExtendedCallResponse| { &m.data },
            |m: &mut ExtendedCallResponse| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExtendedCallResponse>(
            "ExtendedCallResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExtendedCallResponse {
    const NAME: &'static str = "ExtendedCallResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.alkanes.push(is.read_message()?);
                },
                18 => {
                    self.storage.push(is.read_message()?);
                },
                26 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.alkanes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.storage {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.alkanes {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.storage {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExtendedCallResponse {
        ExtendedCallResponse::new()
    }

    fn clear(&mut self) {
        self.alkanes.clear();
        self.storage.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExtendedCallResponse {
        static instance: ExtendedCallResponse = ExtendedCallResponse {
            alkanes: ::std::vec::Vec::new(),
            storage: ::std::vec::Vec::new(),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExtendedCallResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExtendedCallResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExtendedCallResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtendedCallResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:alkanes.SimulateResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SimulateResponse {
    // message fields
    // @@protoc_insertion_point(field:alkanes.SimulateResponse.execution)
    pub execution: ::protobuf::MessageField<ExtendedCallResponse>,
    // @@protoc_insertion_point(field:alkanes.SimulateResponse.gas_used)
    pub gas_used: u64,
    // special fields
    // @@protoc_insertion_point(special_field:alkanes.SimulateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SimulateResponse {
    fn default() -> &'a SimulateResponse {
        <SimulateResponse as ::protobuf::Message>::default_instance()
    }
}

impl SimulateResponse {
    pub fn new() -> SimulateResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ExtendedCallResponse>(
            "execution",
            |m: &SimulateResponse| { &m.execution },
            |m: &mut SimulateResponse| { &mut m.execution },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gas_used",
            |m: &SimulateResponse| { &m.gas_used },
            |m: &mut SimulateResponse| { &mut m.gas_used },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SimulateResponse>(
            "SimulateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SimulateResponse {
    const NAME: &'static str = "SimulateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.execution)?;
                },
                16 => {
                    self.gas_used = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.execution.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.gas_used != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.gas_used);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.execution.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.gas_used != 0 {
            os.write_uint64(2, self.gas_used)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SimulateResponse {
        SimulateResponse::new()
    }

    fn clear(&mut self) {
        self.execution.clear();
        self.gas_used = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SimulateResponse {
        static instance: SimulateResponse = SimulateResponse {
            execution: ::protobuf::MessageField::none(),
            gas_used: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SimulateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SimulateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SimulateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimulateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:alkanes.AlkaneInventoryRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AlkaneInventoryRequest {
    // message fields
    // @@protoc_insertion_point(field:alkanes.AlkaneInventoryRequest.id)
    pub id: ::protobuf::MessageField<AlkaneId>,
    // special fields
    // @@protoc_insertion_point(special_field:alkanes.AlkaneInventoryRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AlkaneInventoryRequest {
    fn default() -> &'a AlkaneInventoryRequest {
        <AlkaneInventoryRequest as ::protobuf::Message>::default_instance()
    }
}

impl AlkaneInventoryRequest {
    pub fn new() -> AlkaneInventoryRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AlkaneId>(
            "id",
            |m: &AlkaneInventoryRequest| { &m.id },
            |m: &mut AlkaneInventoryRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AlkaneInventoryRequest>(
            "AlkaneInventoryRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AlkaneInventoryRequest {
    const NAME: &'static str = "AlkaneInventoryRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.id)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AlkaneInventoryRequest {
        AlkaneInventoryRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AlkaneInventoryRequest {
        static instance: AlkaneInventoryRequest = AlkaneInventoryRequest {
            id: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AlkaneInventoryRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AlkaneInventoryRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AlkaneInventoryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AlkaneInventoryRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:alkanes.AlkaneInventoryResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AlkaneInventoryResponse {
    // message fields
    // @@protoc_insertion_point(field:alkanes.AlkaneInventoryResponse.alkanes)
    pub alkanes: ::std::vec::Vec<AlkaneTransfer>,
    // special fields
    // @@protoc_insertion_point(special_field:alkanes.AlkaneInventoryResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AlkaneInventoryResponse {
    fn default() -> &'a AlkaneInventoryResponse {
        <AlkaneInventoryResponse as ::protobuf::Message>::default_instance()
    }
}

impl AlkaneInventoryResponse {
    pub fn new() -> AlkaneInventoryResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "alkanes",
            |m: &AlkaneInventoryResponse| { &m.alkanes },
            |m: &mut AlkaneInventoryResponse| { &mut m.alkanes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AlkaneInventoryResponse>(
            "AlkaneInventoryResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AlkaneInventoryResponse {
    const NAME: &'static str = "AlkaneInventoryResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.alkanes.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.alkanes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.alkanes {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AlkaneInventoryResponse {
        AlkaneInventoryResponse::new()
    }

    fn clear(&mut self) {
        self.alkanes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AlkaneInventoryResponse {
        static instance: AlkaneInventoryResponse = AlkaneInventoryResponse {
            alkanes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AlkaneInventoryResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AlkaneInventoryResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AlkaneInventoryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AlkaneInventoryResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ralkanes.proto\x12\x07alkanes\")\n\x07uint128\x12\x0e\n\x02lo\x18\x01\
    \x20\x01(\x04R\x02lo\x12\x0e\n\x02hi\x18\x02\x20\x01(\x04R\x02hi\"T\n\
    \x08AlkaneId\x12&\n\x05block\x18\x01\x20\x01(\x0b2\x10.alkanes.uint128R\
    \x05block\x12\x20\n\x02tx\x18\x02\x20\x01(\x0b2\x10.alkanes.uint128R\x02\
    tx\"[\n\x0eAlkaneTransfer\x12!\n\x02id\x18\x01\x20\x01(\x0b2\x11.alkanes\
    .AlkaneIdR\x02id\x12&\n\x05value\x18\x02\x20\x01(\x0b2\x10.alkanes.uint1\
    28R\x05value\"\x8e\x02\n\x14MessageContextParcel\x121\n\x07alkanes\x18\
    \x01\x20\x03(\x0b2\x17.alkanes.AlkaneTransferR\x07alkanes\x12\x20\n\x0bt\
    ransaction\x18\x02\x20\x01(\x0cR\x0btransaction\x12\x16\n\x06height\x18\
    \x04\x20\x01(\x04R\x06height\x12\x18\n\x07txindex\x18\x06\x20\x01(\rR\
    \x07txindex\x12\x1a\n\x08calldata\x18\x05\x20\x01(\x0cR\x08calldata\x12\
    \x12\n\x04vout\x18\x07\x20\x01(\rR\x04vout\x12\x18\n\x07pointer\x18\x08\
    \x20\x01(\rR\x07pointer\x12%\n\x0erefund_pointer\x18\t\x20\x01(\rR\rrefu\
    ndPointer\"6\n\x0cKeyValuePair\x12\x10\n\x03key\x18\x01\x20\x01(\x0cR\
    \x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05value\"\x8e\x01\n\
    \x14ExtendedCallResponse\x121\n\x07alkanes\x18\x01\x20\x03(\x0b2\x17.alk\
    anes.AlkaneTransferR\x07alkanes\x12/\n\x07storage\x18\x02\x20\x03(\x0b2\
    \x15.alkanes.KeyValuePairR\x07storage\x12\x12\n\x04data\x18\x03\x20\x01(\
    \x0cR\x04data\"j\n\x10SimulateResponse\x12;\n\texecution\x18\x01\x20\x01\
    (\x0b2\x1d.alkanes.ExtendedCallResponseR\texecution\x12\x19\n\x08gas_use\
    d\x18\x02\x20\x01(\x04R\x07gasUsed\";\n\x16AlkaneInventoryRequest\x12!\n\
    \x02id\x18\x01\x20\x01(\x0b2\x11.alkanes.AlkaneIdR\x02id\"L\n\x17AlkaneI\
    nventoryResponse\x121\n\x07alkanes\x18\x01\x20\x03(\x0b2\x17.alkanes.Alk\
    aneTransferR\x07alkanesb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(Uint128::generated_message_descriptor_data());
            messages.push(AlkaneId::generated_message_descriptor_data());
            messages.push(AlkaneTransfer::generated_message_descriptor_data());
            messages.push(MessageContextParcel::generated_message_descriptor_data());
            messages.push(KeyValuePair::generated_message_descriptor_data());
            messages.push(ExtendedCallResponse::generated_message_descriptor_data());
            messages.push(SimulateResponse::generated_message_descriptor_data());
            messages.push(AlkaneInventoryRequest::generated_message_descriptor_data());
            messages.push(AlkaneInventoryResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
